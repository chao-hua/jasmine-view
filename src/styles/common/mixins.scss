@import './config.scss';
@import './function.scss';
@import './utils.scss';

/* BEM mixins
 --------------------- */

@mixin b($block) {
    $B: $namespace + $block-separator + $block !global;

    .#{$B} {
        @content;
    }
}


@mixin e($element) {
    $E: $element !global;
    $selector: &;
    $currentSelector: #{$selector + $element-separator + $element};

    @if hitAllSpecialNestRule($selector) {
        @at-root {
            #{$selector} {
                #{$B + $element-separator + $element} {
                    @content;
                }
            }
        }
    }

    @else {
        @at-root {
            #{$currentSelector} {
                @content;
            }
        }
    }
}


@mixin m($modifier) {
    $selector: &;
    $currentSelector: #{$selector + $modifier-separator + $modifier};

    @at-root {
        #{$currentSelector} {
            @content;
        }
    }
}

@mixin when($state) {
    @at-root {
        #{&}.#{$state-prefix + $state} {
            @content;
        }
    }
}

@mixin share-rule($name) {
    $rule-name: '%share-'+$name;

    @at-root #{$rule-name} {
        @content;
    }

}

@mixin extend-rule($name) {
    @extend #{'%share-'+$name};
}


/* Button
 --------------------- */

@mixin button-plain($color) {
    color: $color;
    background-color: mix($--color-white, $color, 90%);
    border-color: mix($--color-white, $color, 50%);

    &:hover,
    &:focus {
        color: $--color-white;
        background-color: $color;
        border-color: $color;
    }

    &:active {
        color: $--color-white;
        background-color: mix($--color-black, $color, $--button-active-shade-percent);
        border-color: mix($--color-black, $color, $--button-active-shade-percent);
        outline: none;
    }

    &.is-disabled {

        &,
        &:hover,
        &:focus,
        &:active {
            color: mix($--color-white, $color, 40%);
            background-color: mix($--color-white, $color, 90%);
            border-color: mix($--color-white, $color, 80%);
        }
    }
}


@mixin button-variant($color, $background-color, $border-color) {
    color: $color;
    background-color: $background-color;
    border-color: $border-color;

    &:focus,
    &:hover {
        color: $color;
        background-color: mix($--color-white, $background-color, $--button-hover-tint-percent);
        border-color: mix($--color-white, $border-color, $--button-hover-tint-percent);
    }

    &:active {
        color: $color;
        background-color: mix($--color-black, $background-color, $--button-active-shade-percent);
        border-color: mix($--color-black, $border-color, $--button-active-shade-percent);
        outline: none;
    }

    &.is-disabled {

        &,
        &:focus,
        &:hover {
            color: $--color-white;
            background-color: mix($background-color, $--color-white);
            border-color: mix($border-color, $--color-white);
        }
    }

    &.is-plain {
        @include button-plain($background-color);
    }

    &.is-click {
        &:after {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            border-radius: inherit;
            border: 0 solid rgba($background-color, .3);
            animation: fadeEffect .5s cubic-bezier(0, 0, .58, 1), waveEffect .4s cubic-bezier(.08, .82, .17, 1);
            animation-fill-mode: forwards;
            display: block;
            pointer-events: none
        }

        @keyframes waveEffect {
            100% {
                top: -6px;
                left: -6px;
                bottom: -6px;
                right: -6px;
                border-width: 6px
            }
        }

        @keyframes fadeEffect {
            100% {
                opacity: 0;
            }
        }
    }
}

@mixin button-size($font-size, $border-radius, $padding-vertical, $padding-horizontal, $padding-round-horizontal:$padding-horizontal) {
    @include utils-font-size($font-size);
    padding: $padding-vertical $padding-horizontal;
    border-radius: $border-radius;

    &.is-round {
        padding: $padding-vertical $padding-round-horizontal;
    }

    &.is-circle {
        padding: $padding-vertical;
    }
}